import React, { useEffect, useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { Zap, Crosshair, Hash, Target, Compass, Clock, Trophy, Crown, Bell, Calendar } from 'lucide-react';
import type { ReflexGameHistory, TargetTrackingHistory, SequenceGameHistory } from '../types/game';
import { STORAGE_KEYS } from '../types/game';
import { HybridRankingService } from '../services/hybridRankingService';
import { GameHistoryService } from '../services/gameHistoryService';
import type { RankingEntry } from '../services/localRankingService';
import { UserIdentificationService } from '../services/userIdentificationService';
import panel1 from '../assets/images/panel1.png';
import panel2 from '../assets/images/panel2.png';
import panel3 from '../assets/images/panel3.png';
import panel4 from '../assets/images/panel4.png';

interface LastResult {
    primaryStat: string;
    primaryValue: string;
    secondaryStat?: string;
    secondaryValue?: string;
    date: string;
}

interface Notice {
    id: string;
    date: string;
    title: string;
    content?: string;
    type?: 'info' | 'update' | 'maintenance' | 'event';
}

interface GameCardProps {
    title: string;
    description: string | React.ReactNode;
    icon: React.ReactNode;
    path: string;
    lastResult?: LastResult;
    imageSrc?: string;
    playCount?: number;
    topPlayer?: RankingEntry | null;
    isComingSoon?: boolean;
}

// „ÅäÁü•„Çâ„Åõ„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàÔºà2Ë°å„É¨„Ç§„Ç¢„Ç¶„ÉàÁâàÔºâ
const NoticeSection: React.FC<{ notices: Notice[] }> = ({ notices }) => {
    if (!notices || notices.length === 0) {
        return null;
    }

    return (
        <div className="py-3 px-4 border-b border-slate-200/60" style={{ backgroundColor: '#021D40' }}>
            <div className="max-w-6xl mx-auto">
                <div className="space-y-1.5">
                    {notices.slice(0, 2).map((notice) => (
                        <div key={notice.id} className="flex items-center space-x-3">
                            <span className="text-xs text-gray-300 font-medium whitespace-nowrap bg-gray-600 px-2 py-0.5 rounded-full">
                                {notice.date}
                            </span>
                            <span className="text-sm text-white font-medium">
                                {notice.title}
                            </span>
                        </div>
                    ))}
                </div>
            </div>
        </div>
    );
};

const GameCard: React.FC<GameCardProps> = ({ title, description, icon, path, lastResult, imageSrc, playCount, topPlayer, isComingSoon = false }) => {
    const navigate = useNavigate();
    

    
    // Ë®∫Êñ≠Á≥ª„Ç≤„Éº„É†„Éª„ÇØ„Ç§„Ç∫Á≥ª„Ç≤„Éº„É†„Åã„Å©„ÅÜ„Åã„ÇíÂà§ÂÆöÔºà„É©„É≥„Ç≠„É≥„Ç∞„ÉªË®òÈå≤„ÇíË°®Á§∫„Åó„Å™„ÅÑÔºâ
    const isDiagnosisGame = title.includes('Ë®∫Êñ≠') || title.includes('„ÇØ„Ç§„Ç∫');

    const handleClick = () => {
        if (isComingSoon) {
            // Coming Soon„ÅÆÂ†¥Âêà„ÅØ„ÇØ„É™„ÉÉ„ÇØÁÑ°Âäπ
            return;
        }
        navigate(path);
    };

    return (
        <div
            className={`bg-white rounded-xl shadow-lg border-0 transform transition-all duration-300 group overflow-hidden ${
                isComingSoon 
                    ? 'opacity-75 cursor-default' 
                    : 'cursor-pointer hover:shadow-xl hover:-translate-y-2'
            }`}
            style={{
                boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)'
            }}
            onClick={handleClick}
        >
            {isComingSoon ? (
                <div className="h-40 relative bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center">
                    <div className="text-center">
                        <div className="text-3xl mb-2">üöß</div>
                        <div className="text-lg font-semibold text-gray-600">Now developing...</div>
                    </div>
                </div>
            ) : imageSrc && (
                <div className="h-40 relative">
                    <img src={imageSrc} alt="panel" className="w-full h-full object-cover transform transition-transform duration-500 group-hover:scale-105" />
                    <div className="absolute inset-0 bg-gradient-to-t from-black/40 to-transparent"></div>
                    {/* „ÇØ„Ç§„Ç∫Á≥ª„Ç≤„Éº„É†„ÅÆÂ†¥Âêà„ÅØÂÖçË®±„É©„Éô„É´„ÄÅ„Åù„ÅÆ‰ªñ„ÅØ„Éó„É¨„Ç§ÂõûÊï∞„ÇíË°®Á§∫ */}
                    {title.includes('„ÇØ„Ç§„Ç∫') ? (
                        <div className="absolute top-2 left-2 px-2 py-1 text-xs font-medium bg-red-500 text-white rounded-md shadow-sm">
                            Áã©ÁåüÂÖçË®± Êú™ÂèñÂæóËÄÖÂêë„Åë
                        </div>
                    ) : playCount !== undefined && (
                        <div className="absolute bottom-0 right-0 px-2 py-1 text-sm font-medium transform transition-transform duration-500 group-hover:scale-105 text-white" style={{ backgroundColor: '#2f76ac' }}>
                            Total {playCount} plays
                        </div>
                    )}
                </div>
            )}
            <div className="text-left p-6">
                <div className="mb-2">
                    <h3 className="text-xl font-semibold text-gray-800">
                        {title}
                    </h3>
                </div>
                <p className="text-gray-600 font-normal leading-relaxed mb-6">
                    {description}
                </p>
                
                {/* 1‰Ωç„Éó„É¨„Ç§„É§„ÉºË°®Á§∫ÔºàË®∫Êñ≠Á≥ª„Ç≤„Éº„É†‰ª•Â§ñ„ÅÆ„ÅøÔºâ */}
                {!isDiagnosisGame && (
                    <div className="mb-4 p-3 bg-gradient-to-r from-yellow-50 to-amber-50 rounded-lg border border-yellow-200">
                        {topPlayer ? (
                            <>
                                {/* „Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„É¨„Ç§„Ç¢„Ç¶„ÉàÔºàmd‰ª•‰∏äÔºâ */}
                                <div className="hidden md:flex items-center justify-between">
                                    <div className="flex items-center">
                                        <Crown className="w-4 h-4 text-yellow-600 mr-2" />
                                        <span className="text-sm font-medium text-gray-700 mr-2">1‰Ωç</span>
                                        <span className="text-md font-bold text-yellow-700">
                                            {title.includes('ÂèçÂ∞ÑÁ•ûÁµå')
                                                ? `${((topPlayer?.score || 0) / 1000).toFixed(5)}s`
                                                : title.includes('„Çø„Éº„Ç≤„ÉÉ„Éà') || title.includes('„Ç´„Ç¶„É≥„Éà„Ç¢„ÉÉ„Éó')
                                                ? `${((topPlayer?.score || 0) / 1000).toFixed(3)}s`
                                                : `${topPlayer?.score}`
                                            }
                                        </span>
                                    </div>
                                    <div className="relative group">
                                        <span 
                                            className="text-sm text-yellow-700 truncate max-w-[160px] inline-block cursor-help"
                                            title={topPlayer?.displayName}
                                        >
                                            {topPlayer?.displayName}
                                        </span>
                                        
                                        {/* „Éõ„Éê„Éº„ÉÑ„Éº„É´„ÉÅ„ÉÉ„Éó */}
                                        <div className="absolute right-0 top-full mt-1 px-2 py-1 bg-gray-900 text-white text-xs rounded shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 z-50 whitespace-nowrap pointer-events-none">
                                            {topPlayer?.displayName}
                                        </div>
                                    </div>
                                </div>
                                
                                {/* „É¢„Éê„Ç§„É´„É¨„Ç§„Ç¢„Ç¶„ÉàÔºàmdÊú™Ê∫ÄÔºâ */}
                                <div className="md:hidden">
                                    {/* ‰∏äÊÆµÔºö1‰Ωç + „Çπ„Ç≥„Ç¢ */}
                                    <div className="flex items-center justify-between mb-2">
                                        <div className="flex items-center">
                                            <Crown className="w-4 h-4 text-yellow-600 mr-2" />
                                            <span className="text-sm font-medium text-gray-700">1‰Ωç</span>
                                        </div>
                                        <span className="text-md font-bold text-yellow-700">
                                            {title.includes('ÂèçÂ∞ÑÁ•ûÁµå')
                                                ? `${((topPlayer?.score || 0) / 1000).toFixed(5)}s`
                                                : title.includes('„Çø„Éº„Ç≤„ÉÉ„Éà') || title.includes('„Ç´„Ç¶„É≥„Éà„Ç¢„ÉÉ„Éó')
                                                ? `${((topPlayer?.score || 0) / 1000).toFixed(3)}s`
                                                : `${topPlayer?.score}`
                                            }
                                        </span>
                                    </div>
                                    {/* ‰∏ãÊÆµÔºö„É¶„Éº„Ç∂„ÉºÂêç */}
                                    <div className="ml-6">
                                        <span className="text-sm text-yellow-700 truncate block">
                                            {topPlayer?.displayName}
                                        </span>
                                    </div>
                                </div>
                            </>
                        ) : (
                            <div className="flex items-center">
                                <Crown className="w-4 h-4 text-gray-400 mr-2" />
                                <span className="text-sm text-gray-500">„Åæ„Å†„É©„É≥„Ç≠„É≥„Ç∞„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</span>
                            </div>
                        )}
                    </div>
                )}
                
                {/* ÂâçÂõû„ÅÆÁµêÊûúË°®Á§∫ÔºàË®∫Êñ≠Á≥ª„Ç≤„Éº„É†‰ª•Â§ñ„ÅÆ„ÅøÔºâ */}
                {!isDiagnosisGame && (
                    <div className="mb-6 p-4 bg-gray-50 rounded-lg border min-h-[100px]">
                        {lastResult ? (
                            <>
                                <div className="flex items-center justify-between mb-2">
                                    <div className="flex items-center">
                                        <span className="text-sm font-medium text-gray-700">„ÅÇ„Å™„Åü„ÅÆÂâçÂõûË®òÈå≤</span>
                                    </div>
                                    <div className="flex items-center">
                                        <Clock size={12} className="text-gray-400 mr-1" />
                                        <span className="text-xs text-gray-500">{lastResult.date}</span>
                                    </div>
                                </div>
                                <div className={`${lastResult.secondaryStat ? 'grid grid-cols-2 gap-3' : 'flex justify-center'}`}>
                                    <div className={`${!lastResult.secondaryStat ? 'text-center' : ''}`}>
                                        <p className="text-xs text-gray-500">{lastResult.primaryStat}</p>
                                        <p className="text-lg font-bold text-blue-600">{lastResult.primaryValue}</p>
                                    </div>
                                    {lastResult.secondaryStat && (
                                        <div>
                                            <p className="text-xs text-gray-500">{lastResult.secondaryStat}</p>
                                            <p className="text-lg font-bold text-green-600">{lastResult.secondaryValue}</p>
                                        </div>
                                    )}
                                </div>
                            </>
                        ) : (
                            <div className="flex flex-col items-center justify-center h-full py-2">
                                <div className="flex items-center mb-2">
                                    <Trophy size={16} className="text-gray-400 mr-2" />
                                    <span className="text-sm font-medium text-gray-500">Ë®òÈå≤</span>
                                </div>
                                <p className="text-sm text-gray-400 text-center">„Åæ„Å†„Éó„É¨„Ç§Ë®òÈå≤„Åå<br />„ÅÇ„Çä„Åæ„Åõ„Çì</p>
                            </div>
                        )}
                    </div>
                )}
                
                <div className="mt-6">
                    <button className="w-full px-8 py-3 bg-blue-500 text-white rounded-lg text-sm font-medium group-hover:bg-blue-600 transition-all duration-300 shadow-md group-hover:shadow-lg">
                        ÈñãÂßã„Åô„Çã
                    </button>
                </div>
            </div>
        </div>
    );
};

const HomePage: React.FC = () => {
    const ENABLE_REFLEX_PANEL = true;
    const ENABLE_TARGET_PANEL = true;
    const ENABLE_SEQUENCE_PANEL = true;
    
    // „Çµ„É≥„Éó„É´„ÅäÁü•„Çâ„Åõ„Éá„Éº„Çø
    const notices: Notice[] = [
        {
            id: '1',
            date: '09.21',
            title: '„Éè„É≥„Éà„É¨„Çí„É™„É™„Éº„Çπ„Åó„Åæ„Åó„ÅüÔºÅ',
            type: 'event'
        },
        {
            id: '2',
            date: '09.23',
            title: 'Êñ∞Ë¶è„Éà„É¨„Éº„Éã„É≥„Ç∞„É°„Éã„É•„Éº„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü',
            type: 'update'
        }
    ];
    const [lastResults, setLastResults] = useState<{
        reflex?: LastResult;
        target?: LastResult;
        sequence?: LastResult;
    }>({});
    
    const [playCounts, setPlayCounts] = useState<{
        reflex?: number;
        target?: number;
        sequence?: number;
    }>({});
    
    const [topPlayers, setTopPlayers] = useState<{
        reflex?: RankingEntry | null;
        target?: RankingEntry | null;
        sequence?: RankingEntry | null;
    }>({});

    // „Ç≤„Éº„É†Â±•Ê≠¥„Åã„ÇâÂêÑ„Ç≤„Éº„É†„ÅÆÊúÄÊñ∞Ë®òÈå≤„ÇíÂèñÂæó
    useEffect(() => {
        const loadLastResults = async () => {
            try {
                const gameHistoryService = GameHistoryService.getInstance();
                
                // ÂàùÂõû„É≠„Éº„ÉâÊôÇ„Å´LocalStorage„Åã„Çâ„ÇØ„É©„Ç¶„Éâ„Å∏ÁßªË°å
                console.log('Starting migration from LocalStorage to cloud...');
                await gameHistoryService.migrateLocalToCloud();

                // ÂèçÂ∞ÑÁ•ûÁµå„ÉÜ„Çπ„Éà„ÅÆÊúÄÊñ∞Ë®òÈå≤
                const reflexLatest = await gameHistoryService.getLatestGameHistory<ReflexGameHistory>('reflex');
                console.log('üîç Reflex latest game history:', reflexLatest);
                if (reflexLatest) {
                    console.log('DEBUG Raw averageTime:', reflexLatest.averageTime);
                    console.log('DEBUG Converted to seconds:', (reflexLatest.averageTime / 1000).toFixed(5));
                    console.log('DEBUG Success rate:', reflexLatest.successRate);
                    
                    setLastResults(prev => ({
                        ...prev,
                        reflex: {
                            primaryStat: 'Âπ≥ÂùáÂèçÂøúÊôÇÈñì',
                            primaryValue: `${(reflexLatest.averageTime / 1000).toFixed(5)}s`,
                            date: new Date(reflexLatest.date).toLocaleDateString('ja-JP')
                        }
                    }));
                }
                
                // „Éó„É¨„Ç§ÂõûÊï∞„ÇíË®≠ÂÆöÔºà„ÇØ„É©„Ç¶„Éâ„Åã„ÇâÂÖ®„É¶„Éº„Ç∂„Éº„ÅÆÁ∑è„Éó„É¨„Ç§ÂõûÊï∞„ÇíÂèñÂæóÔºâ
                // „É¶„Éº„Ç∂„Éº„ÅÆÂ±•Ê≠¥„ÅÆÊúâÁÑ°„Å´Èñ¢‰øÇ„Å™„ÅèÂÆüË°å
                try {
                    const hybridRankingService = HybridRankingService.getInstance();
                    console.log(`üîç HomePage: Getting reflex total play count...`);
                    const totalPlayCount = await hybridRankingService.getTotalPlayCount('reflex');
                    console.log(`üîç HomePage: reflex total play count result:`, totalPlayCount);
                    
                    if (totalPlayCount > 0) {
                        console.log(`‚úÖ HomePage: Successfully got reflex play count: ${totalPlayCount}`);
                        setPlayCounts(prev => ({
                            ...prev,
                            reflex: totalPlayCount
                        }));
                    } else {
                        console.warn(`‚ö†Ô∏è HomePage: Got 0 play count for reflex, trying fallback`);
                        throw new Error('Zero play count returned from cloud');
                    }
                } catch (error) {
                    console.error('‚ùå HomePage: Failed to get reflex total play count from cloud:', error);
                    console.error('Error details:', error);
                    
                    // „ÇØ„É©„Ç¶„Éâ„Åå0‰ª∂„ÅÆÂ†¥Âêà„ÅØLocalStorage„Å´‰æùÂ≠ò„Åõ„Åö0„ÇíË°®Á§∫
                    console.log(`üßπ HomePage: Cloud returned 0, showing 0 for reflex (ignoring localStorage)`);
                    setPlayCounts(prev => ({
                        ...prev,
                        reflex: 0
                    }));
                }

                // „Çø„Éº„Ç≤„ÉÉ„ÉàËøΩË∑°„Ç≤„Éº„É†„ÅÆÊúÄÊñ∞Ë®òÈå≤ÔºàÂõûÈÅøÁ≠ñÔºöÂÖ®Â±•Ê≠¥„Åã„ÇâÊúÄÊñ∞„ÇíÂèñÂæóÔºâ
                const targetHistory = await gameHistoryService.getGameHistory<TargetTrackingHistory>('target');
                const targetLatest = targetHistory.length > 0 ? targetHistory[0] : null;
                if (targetLatest) {
                    setLastResults(prev => ({
                        ...prev,
                        target: {
                            primaryStat: 'ÂêàË®àÊôÇÈñì',
                            primaryValue: `${targetLatest.totalTime.toFixed(3)}s`, // ‰øÆÊ≠£: Êó¢„Å´ÁßíÂçò‰Ωç
                            secondaryStat: 'Âπ≥ÂùáÂèçÂøú',
                            secondaryValue: `${targetLatest.averageReactionTime.toFixed(3)}s`,
                            date: new Date(targetLatest.date).toLocaleDateString('ja-JP')
                        }
                    }));
                }
                
                // „Éó„É¨„Ç§ÂõûÊï∞„ÇíË®≠ÂÆöÔºà„ÇØ„É©„Ç¶„Éâ„Åã„ÇâÂÖ®„É¶„Éº„Ç∂„Éº„ÅÆÁ∑è„Éó„É¨„Ç§ÂõûÊï∞„ÇíÂèñÂæóÔºâ
                // „É¶„Éº„Ç∂„Éº„ÅÆÂ±•Ê≠¥„ÅÆÊúâÁÑ°„Å´Èñ¢‰øÇ„Å™„ÅèÂÆüË°å
                try {
                    const hybridRankingService = HybridRankingService.getInstance();
                    console.log(`üîç HomePage: Getting target total play count...`);
                    const totalPlayCount = await hybridRankingService.getTotalPlayCount('target');
                    console.log(`üîç HomePage: target total play count result:`, totalPlayCount);
                    
                    if (totalPlayCount > 0) {
                        console.log(`‚úÖ HomePage: Successfully got target play count: ${totalPlayCount}`);
                        setPlayCounts(prev => ({
                            ...prev,
                            target: totalPlayCount
                        }));
                    } else {
                        console.warn(`‚ö†Ô∏è HomePage: Got 0 play count for target, trying fallback`);
                        throw new Error('Zero play count returned from cloud');
                    }
                } catch (error) {
                    console.error('‚ùå HomePage: Failed to get target total play count from cloud:', error);
                    console.error('Error details:', error);
                    
                    // „ÇØ„É©„Ç¶„Éâ„Åå0‰ª∂„ÅÆÂ†¥Âêà„ÅØLocalStorage„Å´‰æùÂ≠ò„Åõ„Åö0„ÇíË°®Á§∫
                    console.log(`üßπ HomePage: Cloud returned 0, showing 0 for target (ignoring localStorage)`);
                    setPlayCounts(prev => ({
                        ...prev,
                        target: 0
                    }));
                }

                // Êï∞Â≠óÈ†ÜÂ∫è„Ç≤„Éº„É†„ÅÆÊúÄÊñ∞Ë®òÈå≤ÔºàÂõûÈÅøÁ≠ñÔºöÂÖ®Â±•Ê≠¥„Åã„ÇâÊúÄÊñ∞„ÇíÂèñÂæóÔºâ
                const sequenceHistory = await gameHistoryService.getGameHistory<SequenceGameHistory>('sequence');
                const sequenceLatest = sequenceHistory.length > 0 ? sequenceHistory[0] : null;
                console.log('üîç Sequence latest game history:', sequenceLatest);
                if (sequenceLatest) {
                    console.log('üîç Sequence completionTime type:', typeof sequenceLatest.completionTime, 'value:', sequenceLatest.completionTime);
                    setLastResults(prev => ({
                        ...prev,
                        sequence: {
                            primaryStat: 'ÂÆå‰∫ÜÊôÇÈñì',
                            primaryValue: `${sequenceLatest.completionTime.toFixed(3)}s`, // ‰øÆÊ≠£: Êó¢„Å´ÁßíÂçò‰Ωç
                            secondaryStat: 'Âπ≥Âùá„ÇØ„É™„ÉÉ„ÇØÈñìÈöî',
                            secondaryValue: `${sequenceLatest.averageClickInterval.toFixed(3)}s`,
                            date: new Date(sequenceLatest.date).toLocaleDateString('ja-JP')
                        }
                    }));
                }
                
                // „Éó„É¨„Ç§ÂõûÊï∞„ÇíË®≠ÂÆöÔºà„ÇØ„É©„Ç¶„Éâ„Åã„ÇâÂÖ®„É¶„Éº„Ç∂„Éº„ÅÆÁ∑è„Éó„É¨„Ç§ÂõûÊï∞„ÇíÂèñÂæóÔºâ
                // „É¶„Éº„Ç∂„Éº„ÅÆÂ±•Ê≠¥„ÅÆÊúâÁÑ°„Å´Èñ¢‰øÇ„Å™„ÅèÂÆüË°å
                try {
                    const hybridRankingService = HybridRankingService.getInstance();
                    console.log(`üîç HomePage: Getting sequence total play count...`);
                    const totalPlayCount = await hybridRankingService.getTotalPlayCount('sequence');
                    console.log(`üîç HomePage: sequence total play count result:`, totalPlayCount);
                    
                    if (totalPlayCount > 0) {
                        console.log(`‚úÖ HomePage: Successfully got sequence play count: ${totalPlayCount}`);
                        setPlayCounts(prev => ({
                            ...prev,
                            sequence: totalPlayCount
                        }));
                    } else {
                        console.warn(`‚ö†Ô∏è HomePage: Got 0 play count for sequence, trying fallback`);
                        throw new Error('Zero play count returned from cloud');
                    }
                } catch (error) {
                    console.error('‚ùå HomePage: Failed to get sequence total play count from cloud:', error);
                    console.error('Error details:', error);
                    
                    // „ÇØ„É©„Ç¶„Éâ„Åå0‰ª∂„ÅÆÂ†¥Âêà„ÅØLocalStorage„Å´‰æùÂ≠ò„Åõ„Åö0„ÇíË°®Á§∫
                    console.log(`üßπ HomePage: Cloud returned 0, showing 0 for sequence (ignoring localStorage)`);
                    setPlayCounts(prev => ({
                        ...prev,
                        sequence: 0
                    }));
                }
            } catch (error) {
                console.error('Failed to load last results:', error);
            }
        };

        loadLastResults();
    }, []);

    const location = useLocation();

    // „Éà„ÉÉ„Éó„É©„É≥„Ç´„Éº„ÇíÂèñÂæóÔºàÂàùÂõû + „Éö„Éº„Ç∏„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥ÊôÇÔºâ
    useEffect(() => {
        const loadTopPlayers = async () => {
            try {
                const rankingService = HybridRankingService.getInstance();
                const topPlayers = await rankingService.getAllTopPlayers();
                console.log('üîç Top players data:', topPlayers);
                if (topPlayers.sequence) {
                    console.log('üîç Sequence top player score type:', typeof topPlayers.sequence.score, 'value:', topPlayers.sequence.score);
                }
                setTopPlayers(topPlayers);
            } catch (error) {
                console.error('‚ùå Failed to load top players:', error);
            }
        };

        loadTopPlayers();

    }, [location.pathname]); // „Éö„Éº„Ç∏ÈÅ∑ÁßªÊôÇ„Å´ÂÜçÂÆüË°å

    return (
        <div className="flex-1">
            {/* „Éí„Éº„É≠„Éº„Çª„ÇØ„Ç∑„Éß„É≥ */}
            <div className="relative flex items-center justify-center py-12 px-4 min-h-[15vh] overflow-hidden hero-background">
                {/* „Ç∞„É©„Éá„Éº„Ç∑„Éß„É≥„Ç™„Éº„Éê„Éº„É¨„Ç§ */}
                <div className="absolute inset-0 bg-gradient-to-br from-blue-100/10 via-blue-300/40 to-transparent"></div>
                {/* ÂçäÈÄèÊòéÈªí„Ç™„Éº„Éê„Éº„É¨„Ç§„Åß„ÉÜ„Ç≠„Çπ„ÉàÂèØË™≠ÊÄßUP */}
                <div className="absolute inset-0 bg-black/20"></div>
                <div className="relative z-10 max-w-4xl mx-auto text-center">
                    <p className="text-xl md:text-2xl text-white font-light mb-4 drop-shadow-lg font-bold">
                        Áã©Áåü„Éè„É≥„Çø„Éº„ÅÆ„Éà„É¨„Éº„Éã„É≥„Ç∞<br />„Éè„É≥„Çø„ÉºÈÅî„ÅÆ„Åü„ÇÅ„ÅÆÈÅä„Å≥Â†¥
                    </p>
                </div>
            </div>

            {/* „ÅäÁü•„Çâ„Åõ„Çª„ÇØ„Ç∑„Éß„É≥ */}
            <NoticeSection notices={notices} />

                        {/* „Ç≤„Éº„É†ÈÅ∏Êäû„Çª„ÇØ„Ç∑„Éß„É≥ */}
            <div className="py-4 px-4">
                <div className="max-w-6xl mx-auto">


                    <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                        <GameCard
                            title="ÂèçÂ∞ÑÁ•ûÁµå„Éà„É¨„Éº„Éã„É≥„Ç∞"
                            description="Á∑ë„Åã„ÇâËµ§„Å∏„ÅÆËâ≤Â§âÂåñ„Å´Á¥†Êó©„ÅèÂèçÂøú„Åó„Å¶„ÄÅ„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇËµ§„Å´„Å™„ÇãÂâç„Å´„ÇØ„É™„ÉÉ„ÇØ„Åô„Çã„Å®„Éï„É©„Ç§„É≥„Ç∞ÔºÅ"
                            icon={<></>}
                            path="/reflex/instructions"
                            lastResult={lastResults.reflex}
                            imageSrc={ENABLE_REFLEX_PANEL ? panel1 : undefined}
                            playCount={playCounts.reflex}
                            topPlayer={topPlayers.reflex}
                        />
                        <GameCard
                            title="„Çø„Éº„Ç≤„ÉÉ„ÉàËøΩË∑°„Éà„É¨„Éº„Éã„É≥„Ç∞"
                            description="ÁîªÈù¢‰∏ä„ÅÆÊ®ôÁöÑ„ÇíÈ†ÜÁï™„Å´„ÇØ„É™„ÉÉ„ÇØÔºÅ10ÂÄã„ÅÆ„Çø„Éº„Ç≤„ÉÉ„Éà„ÇíÈ†ÜÁï™„Å´ÊíÉ„Å°Êäú„Åç„ÄÅÂèçÂøúÊôÇÈñì„Å®Á∑èÂêàÊôÇÈñì„ÇíÊ∏¨ÂÆö„Åó„Åæ„Åô„ÄÇ"
                            icon={<></>}
                            path="/target/instructions"
                            lastResult={lastResults.target}
                            imageSrc={ENABLE_TARGET_PANEL ? panel2 : undefined}
                            playCount={playCounts.target}
                            topPlayer={topPlayers.target}
                        />
                        <GameCard
                            title="„Ç´„Ç¶„É≥„Éà„Ç¢„ÉÉ„Éó„Éª„Éà„É¨„Éº„Éã„É≥„Ç∞"
                            description="ÁîªÈù¢‰∏ä„Å´„É©„É≥„ÉÄ„É†„Å´ÈÖçÁΩÆ„Åï„Çå„ÅüÊï∞Â≠ó„ÇíÂ∞è„Åï„ÅÑÈ†Ü„Å´„ÇØ„É™„ÉÉ„ÇØ„Åó„Åæ„ÅôÔºÅÂèçÂøúÊôÇÈñì„Å®Á∑èÂêàÊôÇÈñì„ÇíÁ´∂„ÅÑ„Åæ„Åô„ÄÇ"
                            icon={<></>}
                            path="/sequence/instructions"
                            lastResult={lastResults.sequence}
                            imageSrc={ENABLE_SEQUENCE_PANEL ? panel3 : undefined}
                            playCount={playCounts.sequence}
                            topPlayer={topPlayers.sequence}
                        />
                        <GameCard
                            title="Áã©ÁåüÈ≥•Áç£„ÇØ„Ç§„Ç∫ÔºàÁç£È°ûÔºâ"
                            description={
                                <>
                                    20Á®Æ„ÅÆÁã©ÁåüÂãïÁâ©„ÇíË≠òÂà•„Åô„Çã„ÇØ„Ç§„Ç∫„Ç≤„Éº„É†„ÄÇ<br />
                                    ÁîªÂÉè„ÇíË¶ã„Å¶ÂãïÁâ©Âêç„Çí„ÉÜ„Ç≠„Çπ„ÉàÂÖ•Âäõ„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
                                </>
                            }
                            icon={<></>}
                            path="/animal-quiz/instructions"
                            lastResult={undefined}
                            imageSrc="/src/assets/images/panel5.png"
                            playCount={0}
                            topPlayer={undefined}
                            />
                    </div>

                    {/* Êñ∞„Åó„ÅÑ„Ç≤„Éº„É†ÔºàÈñãÁô∫‰∏≠Ôºâ */}
                    <div className="mt-12">

                        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">

                            <GameCard
                                title="ÂãïÁâ©Ë≠òÂà•Ë®òÊÜ∂"
                                description="Áû¨ÈñìÁöÑ„Å´Ë°®Á§∫„Åï„Çå„ÇãÂãïÁâ©„ÇíÊ≠£Á¢∫„Å´Ë≠òÂà•„ÉªË®òÊÜ∂„Åô„Çã„Ç≤„Éº„É†„Åß„Åô„ÄÇÁã©ÁåüÁü•Ë≠ò„Å®Ë®òÊÜ∂Âäõ„ÇíÂêåÊôÇ„Å´Èçõ„Åà„Åæ„Åô„ÄÇ"
                                icon={<></>}
                                path="#"
                                lastResult={undefined}
                                imageSrc={undefined}
                                playCount={0}
                                topPlayer={undefined}
                                isComingSoon={true}
                            />
                            <GameCard
                                title="Ë∂≥Ë∑°ËøΩË∑°Ë®òÊÜ∂"
                                description="Êßò„ÄÖ„Å™ÂãïÁâ©„ÅÆË∂≥Ë∑°„Éë„Çø„Éº„É≥„ÇíË®òÊÜ∂„Åó„ÄÅÊ≠£Á¢∫„Å´Ë≠òÂà•„Åô„Çã„Éà„É©„ÉÉ„Ç≠„É≥„Ç∞„Çπ„Ç≠„É´„ÇíÂêë‰∏ä„Åï„Åõ„Åæ„Åô„ÄÇ"
                                icon={<></>}
                                path="#"
                                lastResult={undefined}
                                imageSrc={undefined}
                                playCount={0}
                                topPlayer={undefined}
                                isComingSoon={true}
                            />
                        </div>
                    </div>
                </div>
            </div>

            {/* Áã©ÁåüÂãïÁâ©Ë®∫Êñ≠„Çª„ÇØ„Ç∑„Éß„É≥ */}
            <div className="bg-white py-16 px-4">
                <div className="max-w-6xl mx-auto">
                    <div className="text-center mb-16">
                        <h2 className="text-3xl md:text-4xl font-light text-gray-800 mb-4">
                            Áã©ÁåüÂãïÁâ©Ë®∫Êñ≠
                        </h2>
                        <p className="text-lg text-gray-600 font-light">
                            „ÅÇ„Å™„Åü„ÅÆÊÄßÊ†º„ÇíÂàÜÊûê„Åó„ÄÅÊúÄÈÅ©„Å™Áã©ÁåüÂØæË±°ÂãïÁâ©„ÇíË®∫Êñ≠
                        </p>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                        <GameCard
                            title="Áã©ÁåüÈ≥•Áç£Ë®∫Êñ≠"
                            description="12„ÅÆË≥™Âïè„Åß„ÅÇ„Å™„Åü„ÅÆÊÄßÊ†º„ÇíÂàÜÊûê„Åó„ÄÅ46Á®Æ„ÅÆÁã©ÁåüÂØæË±°ÂãïÁâ©„Åã„ÇâÊúÄ„ÇÇËøë„ÅÑ1Âåπ„ÇíË®∫Êñ≠„Åó„Åæ„Åô„ÄÇÊâÄË¶ÅÊôÇÈñìÁ¥Ñ5ÂàÜ„ÄÇ"
                            icon={<Compass size={32} className="text-green-600" />}
                            path="/diagnosis"
                            imageSrc={panel4}
                        />
                    </div>
                </div>
            </div>

            {/* ÁâπÂæ¥„Çª„ÇØ„Ç∑„Éß„É≥ */}
            <div className="py-12 px-4">
                <div className="max-w-4xl mx-auto text-center">
                    <p className="text-gray-500 font-light">
                        Á∂ôÁ∂öÁöÑ„Å™„Éà„É¨„Éº„Éã„É≥„Ç∞„Åß„ÄÅÁã©ÁåüÊôÇ„ÅÆÂèçÂ∞ÑÁ•ûÁµå„Å®ÈõÜ‰∏≠Âäõ„ÇíÂêë‰∏ä„Åï„Åõ„Åæ„Åó„Çá„ÅÜ
                    </p>
                </div>
            </div>


        </div>
    );
};

export default HomePage; 